<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>初次见面</title>
    <url>/2020/09/17/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2/</url>
    <content><![CDATA[<p>你好！这里是阿欢同学的博客。<br>这里将分享我的学习笔记和一些生活趣事。<br>请多多指教！</p>
]]></content>
      <categories>
        <category>杂言</category>
      </categories>
      <tags>
        <tag>琐碎的事</tag>
      </tags>
  </entry>
  <entry>
    <title>eplan_harness_prod_学习笔记</title>
    <url>/2021/01/26/eplan-harness-prod-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>##线束建模软件EPLAN Harness prod的学习笔记</p>
<blockquote>
<p>本人在学校车队项目负责线束部分，由于网络上较难找到相关资料，因此将学习笔记记录于此。</p>
</blockquote>
<a id="more"></a>

<hr>
<p>####前言：</p>
<p>EPLAN Harness prod是一款用于线束建模的软件。软件本身不复杂，但由于并不是广泛使用的软件，网络上学习的资源不多，学习阶段需要花点心思去研究，为新车进行线束建模的时候才会更加得心应手。</p>
<hr>
<p>####学习资源：</p>
<p><em>跟我一起学EPLAN Harness prod：</em><br>点击链接进入话题 #EPLAN教程 (<a href="https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;__biz=MzA3MjAzNTQ3OA==&amp;scene=1&amp;album_id=1446650997702623233&amp;count=3&amp;uin=&amp;key=&amp;devicetype=Windows+10+x64&amp;version=63010043&amp;lang=zh_CN&amp;ascene=1&amp;fontgear=2">https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;__biz=MzA3MjAzNTQ3OA==&amp;scene=1&amp;album_id=1446650997702623233&amp;count=3&amp;uin=&amp;key=&amp;devicetype=Windows+10+x64&amp;version=63010043&amp;lang=zh_CN&amp;ascene=1&amp;fontgear=2</a>) 查找 “跟我一起学EPLAN Harness prod”共七篇文章。文章内容没有完全的介绍软件的各部分功能，主要用于学习软件的基本操作以及初步了解建模步骤。</p>
<p><em>书本《EPLAN Harness prod 官方教程》</em><br>对软件的介绍比较齐全，能够查找到软件上各个操作的使用方法。建模时候遇到问题可翻查此书寻找解决方法。<br><img src="https://img2.doubanio.com/view/subject/l/public/s33778793.jpg" alt="《EPLAN Harness prod 官方教程》"></p>
<hr>
<p>####学习过程：</p>
<p><em>初步了解软</em><br>从软件自带的样本模型入手，结合教程（软件和教程的模型会不一样），初步了解建模的基本步骤以及基本操作，并尝试建模。</p>
<p><em>尝试对上赛季模型进行线束建模并构思本赛季线束模型</em><br>阅读赛规，看懂整车线束原理图（重点：安全回路，结合赛规看），研究上赛季线束模型，了解并整理各用电器接口及其位置。并根据本赛季模型的变化，查找相关线束建模资料（网络，其他优秀车队等），研究并思考如何优化布线。</p>
<hr>
<p>####基于对方程式赛车线束布置的一些注意点：<br>1、    电源线要根据走的电流大小用线。（搜UL1007 线径和载流量对应表）<br>2、    信号线用20AWG。<br>3、    颜色上，供电线必须是红黑色，安全回路必须是黄色，高压线是橙色，其他颜色随便用。<br>4、    黄色和橙色是不能乱用的颜色。<br>5、    CAN线的GND一定要在终端接地。<br>6、    CAN线尽量不要绕到大电池和电机控制器那边，会有很强的电磁干扰。<br>7、    主开关面板和主控接插件位置会汇聚很多线，也会有很多需要分线的地方，布置的时候就把分线的位置分布得均匀一点，以防出现线堆积过多。<br>8、    接插件分布要合理，如果一个地方有很多接插件，也会变成一大坨。<br>9、    关于导入模型。建议整车各部分模型分开导入，直接把整车模型导入模型会丢失。<br>10、    关于导入导线。对导线、管脚、连接物等命名尽量使用英文进行命名。导入导线时使用中文命名会出现乱码的现象。<br>11、    布线时不建议自动生成导线。手动布线会更加了解整体的走线情况。</p>
<blockquote>
<p>（学习阶段，若有补充，后续更新）</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>FSA</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32学习——PWM舵机控制</title>
    <url>/2020/12/02/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94PWM%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h4 id="STM32控制舵机"><a href="#STM32控制舵机" class="headerlink" title="STM32控制舵机"></a>STM32控制舵机</h4><a id="more"></a>
<p>在STM32中控制舵机，实际上就是开发STM32上的PWM功能，这部分功能需要配置STM32的定时器和GPIO复用共功能，然后就是通过修改定时器计数器的比较寄存器的数值来达到控制PWM的高电平占空比的目的。</p>
<hr>
<p>(1) 定时器 IO 配置<br>(2) 定时器时基结构体 TIM_TimeBaseInitTypeDef 配置<br>(3) 定时器输出比较结构体 TIM_OCInitTypeDef 配置<br>(4) 定时器断路和死区结构体 TIM_BDTRInitTypeDef 配置</p>
<hr>
<h6 id="PWM-输出配置步骤（通过TIM1-CH1输出PWM来控舵机）"><a href="#PWM-输出配置步骤（通过TIM1-CH1输出PWM来控舵机）" class="headerlink" title="PWM 输出配置步骤（通过TIM1_CH1输出PWM来控舵机）"></a>PWM 输出配置步骤（通过TIM1_CH1输出PWM来控舵机）</h6><p>1） 开启 TIM1 时钟，配置 PA8 为复用输出。<br>要使用 TIM1，我们必须先开启 TIM1 的时钟，这里我们还要配置 PA8 为复用输出（当然还要时能 PORTA 的时钟），这是因为 TIM1_CH1 通道将使用 PA8 的复用功能作为输出。<br>库函数使能 TIM3 时钟的方法是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //使能定时器 3 时钟</span><br></pre></td></tr></table></figure>
<p>然后设置 PA8 为复用功能输出的。</p>
<p>2）设置 TIM1 的 ARR 和 PSC。<br>配置TIM_TimeBaseInitTypeDef结构体</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TIM_TimeBaseStructure.TIM_Period = arr; //设置自动重装载值</span><br><span class="line">TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置预分频值</span><br></pre></td></tr></table></figure>

<p>3） 设置 TIM1_CH1 的 PWM 模式及通道方向, 使能 TIM1 的 CH1 输出。<br>配置 TIM_OCInitTypeDef 结构体</p>
<p>4） 使能 TIM1<br>使能 TIM1 的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TIM_Cmd(TIM1, ENABLE); //使能 TIM1</span><br></pre></td></tr></table></figure>

<p>5） 设置 MOE 输出，使能 PWM 输出。（高级定时器才需要）<br>普通定时器在完成以上设置了之后，就可以输出PWM了，但是高级定时器，我们还需要使能刹车和死区寄存器（ TIM1_BDTR）的 MOE 位，以使能整个 OCx（即 PWM）输出。<br>库数的设置函数为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TIM_CtrlPWMOutputs(TIM1,ENABLE);// MOE 主输出使能</span><br></pre></td></tr></table></figure>

<p>6） 修改 TIM1_CCR1 来控制占空比<br>最后，在经过以上设置之后， PWM 其实已经开始输出了，只是其占空比和频率都是固定的，而我们通过修改 TIM1_CCR1 则可以控制 CH1 的输出占空比。<br>在库函数中，修改 TIM1_CCR1 占空比的函数是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)；</span><br></pre></td></tr></table></figure>
<p>理所当然，对于其他通道，分别有一个函数名字，函数格式为 TIM_SetComparex(x=1,2,3,4)。</p>
<hr>
<h6 id="关于PWM"><a href="#关于PWM" class="headerlink" title="关于PWM"></a>关于PWM</h6><p>（网址）</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>学习</tag>
        <tag>元器件</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32学习笔记——贪吃蛇</title>
    <url>/2020/09/18/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<h2 id="初学STM32。"><a href="#初学STM32。" class="headerlink" title="初学STM32。"></a>初学STM32。</h2><hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>个人学单片机也有一段时间了，跟着教程学习，似乎掌握的不太熟练。偶然见到精品店里出售的迷你游戏机，决定尝试做一个贪吃蛇的小外设。制作过程收获颇多，在此做一个记录与分享。</p>
</blockquote>
<a id="more"></a>
<hr>
<h4 id="使用硬件"><a href="#使用硬件" class="headerlink" title="使用硬件"></a>使用硬件</h4><p>普通摇杆、0.96寸OLED屏幕（SPI协议通讯）、STM32F103RCT6开发板。<br><img src="https://s1.ax1x.com/2020/09/19/wI6IBj.jpg" alt="硬件"></p>
<hr>
<h4 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h4><table>
<thead>
<tr>
<th>OLED</th>
<th></th>
<th></th>
<th>摇杆</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>GND</td>
<td>GND</td>
<td></td>
<td>GND</td>
<td>GND</td>
</tr>
<tr>
<td>VCC</td>
<td>3.3V</td>
<td></td>
<td>VCC</td>
<td>3.3V</td>
</tr>
<tr>
<td>D0</td>
<td>PC0</td>
<td></td>
<td>VRX</td>
<td>PA0</td>
</tr>
<tr>
<td>D1</td>
<td>PC1</td>
<td></td>
<td>VRY</td>
<td>PA1</td>
</tr>
<tr>
<td>RES</td>
<td>PB15</td>
<td></td>
<td>SW</td>
<td>PA2</td>
</tr>
<tr>
<td>DC</td>
<td>PA3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>CS</td>
<td>PA6</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://s1.ax1x.com/2020/09/19/wIf3nO.jpg" alt="接线"></p>
<hr>
<h4 id="游戏设计："><a href="#游戏设计：" class="headerlink" title="游戏设计："></a>游戏设计：</h4><p>主要分为前进、控制方向、生成苹果、吃苹果、蛇伸长、撞墙和撞蛇、计分、调速这几个功能。<br>摇杆上的杆用作控制方向，按键则用作调速。<br><img src="https://s1.ax1x.com/2020/09/19/wIW0w4.jpg" alt="游戏中"></p>
<hr>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><h5 id="一、初始化画面。"><a href="#一、初始化画面。" class="headerlink" title="一、初始化画面。"></a>一、初始化画面。</h5><p>将OLED显示屏分为信息栏部分和游戏显示部分。信息显示部分主要是显示分数和速度。游戏显示部分画出游戏区域框和蛇一开始的位置。<br>在我的设计里是用二维数组储存蛇的位置信息，我将蛇最大长度设为500（蛇长可以根据实际做修改），建立数组 snake[500][2]（snake[i][0]表示蛇x轴位置，snake[i][1]表示蛇y轴的位置）。snake[0]作为蛇尾，往后储存数据直到蛇头。建立蛇的备份数组用来储存初始化蛇的数据，便于用来初始化（<del>后来想想其实可以不用的</del>）。除了用数组储存蛇的数据以外，我在网上还见到用链表储存蛇的数据。（<del>初学C++，课堂上老师没教，不太会用，有空研究研究。</del>）</p>
<h5 id="二、蛇向前运动部分。"><a href="#二、蛇向前运动部分。" class="headerlink" title="二、蛇向前运动部分。"></a>二、蛇向前运动部分。</h5><p><strong>第一步</strong> 灭掉蛇尾（S[1]）的点<br><strong>第二步</strong> 更新蛇位置的数据，使得蛇前进<br><strong>第三步</strong> 点亮蛇头的点<br>只要不断更新，蛇就看起来在前进了。<br>下面是原理图<br><img src="https://s1.ax1x.com/2020/09/19/w5rcIf.jpg" alt="蛇前进原理图"></p>
<h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void Snake_move( void )</span><br><span class="line">&#123;</span><br><span class="line">	int i; </span><br><span class="line"></span><br><span class="line">	//灭掉蛇尾的点</span><br><span class="line">	Snake_drawpoint( snake[0][0], snake[0][1], 0 );</span><br><span class="line"></span><br><span class="line">	//前进</span><br><span class="line">	<span class="keyword">for</span> ( i = 0; i &lt; snake_long - 1 ; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		snake[i][0] = snake[i+1][0];</span><br><span class="line">		snake[i][1] = snake[i+1][1];</span><br><span class="line">	&#125;</span><br><span class="line">	snake[snake_long - 1][0] = snake[snake_long-1][0]+aim_x;</span><br><span class="line">	snake[snake_long - 1][1] = snake[snake_long-1][1]+aim_y;</span><br><span class="line"></span><br><span class="line">	//点亮蛇头的点</span><br><span class="line">	Snake_drawpoint ( snake[snake_long-1][0],snake[snake_long-1][1],1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="三、控制方向"><a href="#三、控制方向" class="headerlink" title="三、控制方向"></a>三、控制方向</h5><p>使用STM32的ADC功能获取摇杆x轴和y轴的数据，取合适的数据范围并作比较，更新前进方向。注意判断判断得到的前进方向与原方向相反时，不作方向的更新。</p>
<h6 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void Snake_control(void)</span><br><span class="line">&#123;</span><br><span class="line">	u16 x, y;</span><br><span class="line">	u16 x_jud, y_jud;</span><br><span class="line">	u16 tempx;</span><br><span class="line">	u16 tempy;</span><br><span class="line">	</span><br><span class="line">	//读取数据</span><br><span class="line">	tempx = Get_Adc_Average( ADC_Channel_0, 10);</span><br><span class="line">	tempy = Get_Adc_Average( ADC_Channel_1, 10);</span><br><span class="line">	x = tempx &gt;= 2048? (tempx - 2048) : (2048 - tempx);</span><br><span class="line">	y = tempy &gt;= 2048? (tempy - 2048) : (2048 - tempy);</span><br><span class="line">	x_jud = tempx &gt;= 2048? 1 : 0;</span><br><span class="line">	y_jud = tempy &gt;= 2048? 1 : 0;</span><br><span class="line">	</span><br><span class="line">	//确定方向</span><br><span class="line">	<span class="keyword">if</span>( x &gt; 1024 || y &gt; 1024 ) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>( x &gt; y &amp;&amp; x_jud == 0 &amp;&amp; aim_x != 1) 	//向左</span><br><span class="line">		&#123;</span><br><span class="line">			aim_x = -1;</span><br><span class="line">			aim_y = 0;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>( x &gt; y &amp;&amp; x_jud == 1 &amp;&amp; aim_x != -1)	//向右</span><br><span class="line">		&#123;</span><br><span class="line">			aim_x = 1;</span><br><span class="line">			aim_y = 0;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>( y &gt; x &amp;&amp; y_jud == 0 &amp;&amp; aim_y != 1)	//向下</span><br><span class="line">		&#123;</span><br><span class="line">			aim_x = 0;</span><br><span class="line">			aim_y = -1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>( y &gt; x &amp;&amp; y_jud == 1 &amp;&amp; aim_y != -1)	//向上</span><br><span class="line">		&#123;</span><br><span class="line">			aim_x = 0;</span><br><span class="line">			aim_y = 1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="四、生成苹果"><a href="#四、生成苹果" class="headerlink" title="四、生成苹果"></a>四、生成苹果</h5><p>利用单片机里的定时器中断服务程序生成随机数种子，然后使用 rand() 生成随机数作为苹果位置的数据。</p>
<h6 id="定时器中断服务函数"><a href="#定时器中断服务函数" class="headerlink" title="定时器中断服务函数"></a>定时器中断服务函数</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">u32 seed = 0;</span><br><span class="line">void TIM3_IRQHandler( void )   //TIM3中断</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)</span><br><span class="line">		&#123;</span><br><span class="line">			seed++;		//seed为随机数种子</span><br><span class="line">			TIM_ClearITPendingBit(TIM3, TIM_IT_Update  ); </span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="随机生成苹果"><a href="#随机生成苹果" class="headerlink" title="随机生成苹果"></a>随机生成苹果</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void Snake_apple (u32 seed)</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	srand ( seed );</span><br><span class="line">	apple_x = rand() % 46 + 1;</span><br><span class="line">	apple_y = rand() % 30 + 1;</span><br><span class="line">	Snake_drawpoint ( apple_x, apple_y, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="五、吃苹果-amp-加分"><a href="#五、吃苹果-amp-加分" class="headerlink" title="五、吃苹果&amp;加分"></a>五、吃苹果&amp;加分</h5><p>判断蛇头（身体）坐标是否与苹果坐标相同。如果相同，且蛇长不超过最大值，则分数加一，蛇长加一。</p>
<h6 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void Snake_eatapple ( u32 seed )</span><br><span class="line">&#123;</span><br><span class="line">	u16 i;</span><br><span class="line">	<span class="keyword">for</span> ( i = 0; i &lt; snake_long; i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (snake[i][0] == apple_x &amp;&amp; snake[i][1] == apple_y)</span><br><span class="line">		&#123;</span><br><span class="line">			score++;</span><br><span class="line">			<span class="keyword">if</span> (snake_long &lt; 500)</span><br><span class="line">			&#123;</span><br><span class="line">				snake_long = snake_long+1;</span><br><span class="line">				snake[snake_long-1][0] = snake[snake_long-2][0];</span><br><span class="line">				snake[snake_long-1][1] = snake[snake_long-2][1];</span><br><span class="line">			&#125;</span><br><span class="line">			OLED_ShowNum ( 96, 24, score, 4, 12);</span><br><span class="line">			Snake_apple (seed);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="六、蛇伸长"><a href="#六、蛇伸长" class="headerlink" title="六、蛇伸长"></a>六、蛇伸长</h5><p>在上面吃苹果的部分中，我将增加新蛇头的数据储存为旧蛇头的数据，（如图），此时的蛇被“折叠”起来，随着蛇不断前进，到一定步数后才会真正在屏幕上伸长。<br><img src="https://s1.ax1x.com/2020/09/19/w5r5ss.jpg" alt="蛇伸长原理"></p>
<h5 id="七、撞墙-amp-撞蛇身"><a href="#七、撞墙-amp-撞蛇身" class="headerlink" title="七、撞墙&amp;撞蛇身"></a>七、撞墙&amp;撞蛇身</h5><p>判断蛇头的坐标是否与墙坐标和蛇身坐标相同。相同则结束游戏，显示“GAMEOVER”，几秒后将所有数据初始化，游戏自动重新开始。<br><img src="https://s1.ax1x.com/2020/09/19/wIfFXT.jpg" alt="游戏结束"></p>
<h5 id="八、调速"><a href="#八、调速" class="headerlink" title="八、调速"></a>八、调速</h5><p>使用外部中断服务，读取按键情况。每按一下变化蛇的速度，显示在屏幕上。我将速度设为四挡从1-4为从慢到快。</p>
<h6 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">u32 speed = 320;</span><br><span class="line">void EXTI2_IRQHandler ( void )</span><br><span class="line">&#123;</span><br><span class="line">	delay_ms( 10 );</span><br><span class="line">	<span class="keyword">if</span> ( KEY1 == 0 )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ( speed &gt; 20 )</span><br><span class="line">			speed -= 100;</span><br><span class="line">		<span class="keyword">else</span> speed = 320;</span><br><span class="line">		OLED_ShowNum ( 96, 48, 4 - speed / 100, 4, 12);</span><br><span class="line">	&#125;		 </span><br><span class="line">	EXTI_ClearITPendingBit ( EXTI_Line2 ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="一些问题与想法"><a href="#一些问题与想法" class="headerlink" title="一些问题与想法"></a>一些问题与想法</h4><ul>
<li>没有设置控制游戏开始结束的按键。</li>
<li>使用摇杆时，由于摇杆过于灵活，有时候控制不好会出现蛇走的方向不受控制。</li>
<li>生成苹果时没有考虑消除苹果生成在蛇内部。为了减少麻烦，我是直接将判断苹果是不是在蛇内部，直接计分。</li>
<li>此时出现了一个问题，我一开始时是将吃苹果后苹果的坐标作为新蛇头，但如果苹果出现在蛇内部，就会出现蛇（<del>莫名其妙</del>）撞到自己（蛇头坐标等于蛇身坐标）。所以讲新蛇头设置为与旧蛇头一样的坐标。（与正常情况苹果生成在蛇外部是一样的）</li>
<li>优化：设置按键控制游戏开始结束、用按键控制蛇方向。</li>
<li>尝试：使用链表储存蛇数据、设置迷宫型地图。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
